
  directive @constraint(
    # String constraints
    minLength: Int
    maxLength: Int
    startsWith: String
    endsWith: String
    contains: String
    notContains: String
    pattern: String
    format: String

    # Number constraints
    min: Float
    max: Float
    exclusiveMin: Float
    exclusiveMax: Float
    multipleOf: Float

    # Array/List size constraints
    minItems: Int
    maxItems: Int

    # Shared for Schema wrapper
    uniqueTypeName: String

  ) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION | ARGUMENT_DEFINITION

schema {
  query: Query
  mutation: Mutation
}

input CreateUserInput {
  email: String
  nickname: String!
  phoneNumber: String
}

union CreateUserOutput = CreateUserOutput_Result | Error

type CreateUserOutput_Result {
  result: CreateUserOutput_ResultPayload!
}

type CreateUserOutput_ResultPayload {
  user: User!
}

scalar Date

scalar DateTime

type Error {
  error: ErrorPayload!
}

type ErrorPayload {
  message: String!
}

type Mutation {
  """유저 생성"""
  createUser(input: CreateUserInput!): CreateUserOutput!
  """유저 정보 수정"""
  updateUser(input: UpdateUserInput!): UpdateUserOutput!
}

interface Node {
  """
  Globally unique across all types.
  Represents both the type and the original ID of the object.
  """
  id: ID!
}

type Query {
  node(id: ID!): Node
  userByOriginalId(originalId: String!): User
}

input UpdateUserInput {
  bio: String
  email: String
  nickname: String
  originalUserId: String!
  phoneNumber: String
}

union UpdateUserOutput = Error | UpdateUserOutput_Result

type UpdateUserOutput_Result {
  result: UpdateUserOutput_ResultPayload!
}

type UpdateUserOutput_ResultPayload {
  user: User!
}

type User implements Node {
  bio: String
  createdAt: DateTime!
  email: String
  id: ID!
  nickname: String!
  originalId: String!
  phoneNumber: String
}